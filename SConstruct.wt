# -*- mode: python; -*-
import re

# XXX
# Install
# Java
# Python
# --with-compressors
# make check
# doxygen/docs

EnsureSConsVersion(2, 0, 0)

env = Environment()
conf = env.Configure(config_h='wiredtiger_config.h')

wt_options()

if conf.CheckLib('dl'):
    conf.env.Append(ADDITIONAL_LIBS = ['dl'])
if conf.CheckLib('pthread'):
    conf.env.Append(ADDITIONAL_LIBS = ['pthread'])

wt_config(conf)
wt_compiler(conf)

env = conf.Finish()

# Build the wiredtiger.h file.
replacements = {
    '@VERSION_MAJOR@' : VERSION_MAJOR,
    '@VERSION_MINOR@' : VERSION_MINOR,
    '@VERSION_PATCH@' : VERSION_PATCH,
    '@VERSION_STRING@' : VERSION_STRING,
    '@uintmax_t_decl@': "",             # XXX: Autoconf compatibility.
    '@uintptr_t_decl@': "",             # XXX: Autoconf compatibility.
}
if os_windows:                          # XXX: Autoconf compatibility.
    replacements.update({'@off_t_decl@' : 'typedef int64_t wt_off_t;'})
else:
    replacements.update({'@off_t_decl@' : 'typedef off_t wt_off_t;'})

env.Substfile(
    target='wiredtiger.h',
    source=[
        'src/include/wiredtiger.in',
    ],
    SUBST_DICT=replacements)

# WiredTiger library sources derived from dist/filelist. Any conditions appearing in the file list
# must appear here, and if the value is true, those files will be included.
condition_map = {
    'ARM64_HOST' : os_arm64,
    'POSIX_HOST' : os_posix,
    'POWERPC_HOST' : os_powerpc,
    'WINDOWS_HOST' : os_windows,
    'X86_HOST' : os_x86,
    'ZSERIES_HOST' : os_zseries,
}
def filtered_filelist(f):
    for line in f:
        file_cond = line.split()
        if line.startswith("#") or len(file_cond) == 0:
            continue
        if len(file_cond) == 1 or condition_map[file_cond[1]]:
            yield file_cond[0]
filelist = 'dist/filelist'
wtlib_src = list(filtered_filelist(open(filelist)))

if GetOption("enable_static"):
    wtlib = env.StaticLibrary(target="wiredtiger", source=wtlib_src)
else:
    wtlib = env.SharedLibrary(target="wiredtiger", source=wtlib_src)
Default(wtlib)

Export('env')
conscript = [
    'examples/c/SConscript',
    'ext/compressors/nop/SConscript',
    'src/utilities/SConscript',
    'test/format/SConscript',
    'test/utility/SConscript']
if GetOption("enable_lz4"):
    conscript.append('ext/compressors/lz4/SConscript')
if GetOption("enable_snappy"):
    conscript.append('ext/compressors/snappy/SConscript')
if GetOption("enable_zlib"):
    conscript.append('ext/compressors/zlib/SConscript')
if GetOption("enable_zstd"):
    conscript.append('ext/compressors/zstd/SConscript')
[SConscript(i) for i in conscript]
