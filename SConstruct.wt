# -*- mode: python; -*-
import re

# XXX
# Install?
# Java?

EnsureSConsVersion( 2, 0, 0 )

env = Environment()

wt_options()
wt_platform()
wt_compiler(env)

# Build a zero-length wiredtiger_config.h file so SCons and autoconf can co-exist.
# XXX: Autoconf compatibility.
env.Textfile(
    target='wiredtiger_config.h',
    source=[])

# Build the wiredtiger.h file.
version_file = 'build_posix/aclocal/version-set.m4'
VERSION_MAJOR = None
VERSION_MINOR = None
VERSION_PATCH = None
VERSION_STRING = None

# Read the version information from the version-set.m4 file
for l in open(File(version_file).srcnode().abspath):
    if re.match(r'^VERSION_[A-Z]+', l):
        exec(l)

if (VERSION_MAJOR == None or
    VERSION_MINOR == None or
    VERSION_PATCH == None or
    VERSION_STRING == None):
    print("Failed to find version variables in " + version_file)
    Exit(1)

replacements = {
    '@VERSION_MAJOR@' : VERSION_MAJOR,
    '@VERSION_MINOR@' : VERSION_MINOR,
    '@VERSION_PATCH@' : VERSION_PATCH,
    '@VERSION_STRING@' : VERSION_STRING,
    '@uintmax_t_decl@': "",             # XXX: Autoconf compatibility.
    '@uintptr_t_decl@': "",             # XXX: Autoconf compatibility.
}
if os_windows:                          # XXX: Autoconf compatibility.
    replacements.update({'@off_t_decl@' : 'typedef int64_t wt_off_t;'})
else:
    replacements.update({'@off_t_decl@' : 'typedef off_t wt_off_t;'})

env.Substfile(
    target='wiredtiger.h',
    source=[
        'src/include/wiredtiger.in',
    ],
    SUBST_DICT=replacements)

# WiredTiger library sources derived from dist/filelist. Any conditions appearing in the file list
# must appear here, and if the value is true, those files will be included.
condition_map = {
    'ARM64_HOST' : os_arm64,
    'POSIX_HOST' : os_posix,
    'POWERPC_HOST' : os_powerpc,
    'WINDOWS_HOST' : os_windows,
    'X86_HOST' : os_x86,
    'ZSERIES_HOST' : os_zseries,
}
def filtered_filelist(f):
    for line in f:
        file_cond = line.split()
        if line.startswith("#") or len(file_cond) == 0:
            continue
        if len(file_cond) == 1 or condition_map[file_cond[1]]:
            yield file_cond[0]
filelist = 'dist/filelist'
wtlib_src = list(filtered_filelist(open(filelist)))

if GetOption("enable_static"):
    wtlib = env.StaticLibrary(target="wiredtiger", source=wtlib_src)
else:
    wtlib = env.SharedLibrary(target="wiredtiger", source=wtlib_src)
env.Depends('wiredtiger_config.h', ['SConstruct.wt'])
env.Depends('wiredtiger.h', ['SConstruct.wt', version_file])
env.Depends(wtlib, ['wiredtiger_config.h', filelist])
Default(wtlib)

Export('env')
SConscript('test/utility/SConscript')
SConscript('src/utilities/SConscript')
SConscript('test/format/SConscript')
